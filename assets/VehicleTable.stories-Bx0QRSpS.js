import{j as t}from"./factory-BYdAncit.js";import{B as a}from"./index-B5h4HgXl.js";import{V as i}from"./VehicleTable-DJfCaTYC.js";import"./index-BP8_t0zE.js";import"./index-BVEwUaSm.js";import"./index-CdXB_vz_.js";import"./JobFormContentHeader-CpwVJsvY.js";import"./iconBase-tVazycLF.js";import"./index-B98Pt2jl.js";import"./styled-components.browser.esm-BzjHiQVu.js";import"./theme-CBi4L4pb.js";import"./Button-BmZH4clo.js";import"./polymorphic-factory-BBVriERq.js";import"./Loader-DYJrnaLT.js";import"./Transition-BCGcMdvv.js";import"./UnstyledButton-BYy9qxQd.js";import"./Input-E5qBdqnX.js";import"./index-DHgPtaHi.js";import"./Input-DkGv-MlU.js";import"./use-id-Cc9noPIB.js";import"./random-id-CCVmTau8.js";import"./Flex-DB8_OMZA.js";import"./Popover-jsiwsZQx.js";import"./Popover-KLkcXoeL.js";import"./OptionalPortal-pP32-1nJ.js";import"./use-merged-ref-Zmja8g2s.js";import"./DirectionProvider-Bt7M7wKl.js";import"./use-floating-auto-update-zUEi8vAS.js";import"./create-safe-context-cIFFkskc.js";import"./FocusTrap-BWeZ3v7v.js";import"./use-uncontrolled-D1uLaDoI.js";import"./Group-DAYBdM2T.js";import"./Title-BF1HBFC0.js";import"./VehicleTableData-C3Bx52N8.js";import"./auth-ZgXK2BXz.js";import"./httpClient-DV4VuV9q.js";import"./tslib.es6-Ytcc2UEA.js";import"./Table-CPynlTVo.js";import"./index-D1m89S_o.js";import"./ScrollArea-CIJALQu3.js";import"./get-auto-contrast-value-DNc6ItoQ.js";import"./CheckIcon-DIBRqQfE.js";import"./Skeleton-DfZH9prR.js";import"./Tooltip-Bd5wOlBI.js";const ee={title:"Components/VehicleTable",component:i,parameters:{layout:"fullscreen"},tags:["autodocs"],argTypes:{onCancel:{action:"cancelled",description:"Callback when the cancel button is clicked"},onSelect:{action:"selected",description:"Callback when vehicles are selected"},selectedVehicleIds:{description:"Array of selected vehicles."}},args:{selectedVehicleIds:[]},decorators:[e=>t.jsx(a,{children:t.jsx(e,{})})]},o={render:e=>{const s=n=>{console.log("vehicles selected: ",n)};return t.jsx(i,{onCancel:e.onCancel,onSelect:s,selectedVehicleIds:e.selectedVehicleIds})},args:{selectedVehicleIds:[],onCancel:()=>console.log("canceled")}};var r,c,l;o.parameters={...o.parameters,docs:{...(r=o.parameters)==null?void 0:r.docs,source:{originalSource:`{
  render: args => {
    const handleSelectVehicles = (vehicles: IVehicleTable[]) => {
      console.log('vehicles selected: ', vehicles);
    };
    return <VehicleTable onCancel={args.onCancel} onSelect={handleSelectVehicles} selectedVehicleIds={args.selectedVehicleIds} />;
  },
  args: {
    selectedVehicleIds: [],
    onCancel: () => console.log('canceled')
  }
}`,...(l=(c=o.parameters)==null?void 0:c.docs)==null?void 0:l.source}}};const oe=["DefaultTable"];export{o as DefaultTable,oe as __namedExportsOrder,ee as default};
