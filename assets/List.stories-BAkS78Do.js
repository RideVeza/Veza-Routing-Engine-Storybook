import{j as t}from"./factory-BYdAncit.js";import{r as T}from"./index-BP8_t0zE.js";import{L as i}from"./List-BQStdOE_.js";import"./index-DWJGBGB2.js";import"./iconBase-tVazycLF.js";import"./styled-components.browser.esm-BzjHiQVu.js";import"./theme-CBi4L4pb.js";import"./get-auto-contrast-value-DNc6ItoQ.js";import"./create-safe-context-cIFFkskc.js";import"./DirectionProvider-Bt7M7wKl.js";import"./UnstyledButton-BYy9qxQd.js";import"./polymorphic-factory-BBVriERq.js";import"./use-id-Cc9noPIB.js";import"./random-id-CCVmTau8.js";import"./use-uncontrolled-D1uLaDoI.js";import"./Title-BF1HBFC0.js";import"./CloseButton-Bstq3kTa.js";const n=[{label:"Tab 1",content:t.jsx("div",{children:t.jsx("p",{children:"First Tab Content"})})},{label:"Tab 2",content:t.jsx("div",{children:t.jsx("p",{children:"Second Tab Content"})})},{label:"Tab 3",content:t.jsx("div",{children:t.jsx("p",{children:"Third Tab Content"})})}],F={title:"Components/ListComponent",component:i,parameters:{layout:"fullscreen"},tags:["autodocs"],argTypes:{tabs:{control:!1,description:"Array of tab objects with labels and content"},activeTab:{control:"text",description:"Currently active tab"},setActiveTab:{action:"activeTabChanged",description:"Function to set the active tab"},showAlert:{control:"boolean",description:"Determines if the alert banner should be shown"},alertText:{control:"text",description:"Text to display in the alert banner"},alertTitle:{control:"text",description:"Title to display in the alert banner"},borderRadius:{control:"text",description:"Border radius of the component"},hasBorderBottom:{control:"boolean",description:"Defines if the component should have a bottom border"}},args:{tabs:n,activeTab:"Tab 1",showAlert:!1,alertText:"This is an alert message",alertTitle:"Alert Title",borderRadius:"0 0 20px 20px",hasBorderBottom:!0}},a={render:e=>{const[o,s]=T.useState(e.activeTab);return t.jsx(i,{...e,tabs:n,activeTab:o,setActiveTab:s,showAlert:!1})}},r={render:e=>{const[o,s]=T.useState(e.activeTab);return t.jsx(i,{...e,tabs:n,activeTab:o,setActiveTab:s,showAlert:!0})}};var c,l,b;a.parameters={...a.parameters,docs:{...(c=a.parameters)==null?void 0:c.docs,source:{originalSource:`{
  render: args => {
    const [activeTab, setActiveTab] = useState(args.activeTab);
    return <ListComponent {...args} tabs={tabsData} activeTab={activeTab} setActiveTab={setActiveTab} showAlert={false} />;
  }
}`,...(b=(l=a.parameters)==null?void 0:l.docs)==null?void 0:b.source}}};var p,d,m;r.parameters={...r.parameters,docs:{...(p=r.parameters)==null?void 0:p.docs,source:{originalSource:`{
  render: args => {
    const [activeTab, setActiveTab] = useState(args.activeTab);
    return <ListComponent {...args} tabs={tabsData} activeTab={activeTab} setActiveTab={setActiveTab} showAlert={true} />;
  }
}`,...(m=(d=r.parameters)==null?void 0:d.docs)==null?void 0:m.source}}};const W=["DefaultList","ListWithAlert"];export{a as DefaultList,r as ListWithAlert,W as __namedExportsOrder,F as default};
