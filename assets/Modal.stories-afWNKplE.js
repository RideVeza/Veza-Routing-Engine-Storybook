import{j as e}from"./factory-BYdAncit.js";import{r as m}from"./index-BP8_t0zE.js";import{M as s}from"./Modal-BJIPIsOn.js";import{B as n}from"./Button-BmZH4clo.js";import{F as p}from"./Flex-DB8_OMZA.js";import{T as c}from"./Title-BF1HBFC0.js";import"./Transition-BCGcMdvv.js";import"./index-BVEwUaSm.js";import"./OptionalPortal-pP32-1nJ.js";import"./use-id-Cc9noPIB.js";import"./random-id-CCVmTau8.js";import"./use-merged-ref-Zmja8g2s.js";import"./create-safe-context-cIFFkskc.js";import"./CloseButton-Bstq3kTa.js";import"./polymorphic-factory-BBVriERq.js";import"./UnstyledButton-BYy9qxQd.js";import"./FocusTrap-BWeZ3v7v.js";import"./Paper-C4ja3mkh.js";import"./tslib.es6-Ytcc2UEA.js";import"./styled-components.browser.esm-BzjHiQVu.js";import"./theme-CBi4L4pb.js";import"./Loader-DYJrnaLT.js";const _={title:"Components/ModalComponent",component:s,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{modalContent:{description:"Content to be rendered inside the modal.",control:!1},trigger:{description:"Trigger element to open the modal.",control:!1},isOpen:{description:"Controls whether the modal is open.",control:"boolean"},onClose:{description:"Function to be called when the modal is closed.",action:"closed"},modalWidth:{description:"Size of the modal.",control:"text",defaultValue:"95vw"},modalHeight:{description:"Height of the modal.",control:"text",defaultValue:"90vh"},shouldCloseOnClickOutside:{description:"Determines if the modal should close when clicking outside.",control:"boolean",defaultValue:!0}}},o={render:a=>{const[d,t]=m.useState(!1);return e.jsxs(e.Fragment,{children:[e.jsx(n,{text:"Open Modal",onClick:()=>t(!0)}),e.jsx(s,{...a,modalContent:()=>e.jsxs(p,{direction:"column",mt:200,gap:10,justify:"center",align:"center",children:[e.jsx(c,{order:2,children:"This is the modal content"}),e.jsx(n,{text:"Close Modal",onClick:()=>t(!1)})]}),isOpen:d})]})}};var r,l,i;o.parameters={...o.parameters,docs:{...(r=o.parameters)==null?void 0:r.docs,source:{originalSource:`{
  render: args => {
    const [isModalOpen, setModalOpen] = useState(false);
    return <>\r
        <ButtonComponent text="Open Modal" onClick={() => setModalOpen(true)} />\r
        <ModalComponent {...args} modalContent={() => <Flex direction="column" mt={200} gap={10} justify="center" align="center">\r
              <Title order={2}>This is the modal content</Title>\r
              <ButtonComponent text="Close Modal" onClick={() => setModalOpen(false)} />\r
            </Flex>} isOpen={isModalOpen} />\r
      </>;
  }
}`,...(i=(l=o.parameters)==null?void 0:l.docs)==null?void 0:i.source}}};const z=["DefaultModal"];export{o as DefaultModal,z as __namedExportsOrder,_ as default};
